--krāsu tabula
create table krasas (   
kods varchar2(5) not null constraint color_pk primary key,   
nosaukums varchar2(15));
 
alter table krasas
add constraint code_con CHECK (kods not like '%[^0-9A-Z]%');
 

insert into krasas values ('WHITE','balta');
insert into krasas values ('BLACK','melna');
 
insert into krasas values ('RED01','sarkana');
insert into krasas values ('VIOLT','violeta');
insert into krasas values ('BLUE1','zila');
insert into krasas values ('GREEN','zaļa');
insert into krasas values ('YELOW','dzeltena');
insert into krasas values ('ORANG','oranža');
insert into krasas values ('GREY1','pelēka');

select * from krasas;



--marku tabula
create table markas (  
ID number(4,0) not null constraint marka_pk primary key,  
marka varchar2(20) unique);

alter table markas
add constraint marka_con CHECK (marka not like '%[^0-9A-Z]%');

CREATE SEQUENCE seq_marka
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

insert into markas values (seq_marka.nextval,'AUDI');
insert into markas values (seq_marka.nextval,'ALFA ROMEO');
insert into markas values (seq_marka.nextval,'BENTLEY');
insert into markas values (seq_marka.nextval,'BMW');
insert into markas values (seq_marka.nextval,'CHEVROLET');
insert into markas values (seq_marka.nextval,'CITROEN');
insert into markas values (seq_marka.nextval,'FERRARI');
insert into markas values (seq_marka.nextval,'Mercedes');

select * from markas;

--Modeļu tabula
create table modeli (  
mod_ID number(4,0) not null constraint modelis_pk primary key,  
modelis varchar2(20),
marka_id number(4,0) not null);


ALTER TABLE modeli ADD
CONSTRAINT mod_mark_fk FOREIGN KEY (marka_id) REFERENCES markas (id);

--drop table modeli;

CREATE SEQUENCE seq_modelis
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

insert into modeli values (seq_modelis.nextval,'A4',1);
insert into modeli values (seq_modelis.nextval,'A6',1);
insert into modeli values (seq_modelis.nextval,'RS6',1);
insert into modeli values (seq_modelis.nextval,'E220',8);
insert into modeli values (seq_modelis.nextval,'S500',8);


select * from modeli;

create or replace view mark_modeli
as 
select *
from modeli mo
left join markas ma on ma.id = mo.marka_id;




--Īpašnieku tabula
create table ipasnieki (
ID number(5,0) not null constraint ipasn_pk primary key, 
Pers_kods varchar2(12) not null,
vards varchar2(50) not null,
Uzvards varchar2(50)not null);

ALTER TABLE ipasnieki
ADD UNIQUE (Pers_kods); 


CREATE SEQUENCE seq_ipasn
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

insert into ipasnieki values (seq_ipasn.nextval,'071191-34265','Kārlis','Berziņš');
insert into ipasnieki values (seq_ipasn.nextval,'020591-34265','Ance','Kalniņa');



create or replace package add_ipasn
is
  procedure new_ipasn(pers_k1 varchar2, pers_k2 varchar2, vards varchar2,
                        uzvards varchar);
end;
/

create or replace package body add_ipasn
is
    kluda number(1);
    
  procedure new_ipasn(pers_k1 varchar2, pers_k2 varchar2, vards varchar2, 
                        uzvards varchar)
  is
  begin
    
    kluda := 0;
  
    if (length(pers_k1) <> 6) then
        dbms_output.put_line('kļūda pers kodā 1');
        kluda := 1;
    elsif (length(pers_k2) <> 5) then
        dbms_output.put_line('kļūda pers kodā 2');
        kluda := 1;
    else
         dbms_output.put_line(pers_k1 || '-' || pers_k2);
    end if;
    dbms_output.put_line(length(pers_k2));
    
    if REGEXP_LIKE(pers_k1, '^[[:digit:]]+$') then
        dbms_output.put_line('nav kļūda pers kodā 1');
    else
         dbms_output.put_line('ir kļūda pers kodā 1');
         kluda := 1;
    end if;
    
    if REGEXP_LIKE(pers_k2, '^[[:digit:]]+$') then
        dbms_output.put_line('nav kļūda pers kodā 2');
    else
         dbms_output.put_line('ir kļūda pers kodā 2');
         kluda := 1;
    end if;
    
    if REGEXP_LIKE(vards, '[[:alpha:]]+$') then
        dbms_output.put_line('nav kļūda vardā');
    else
         dbms_output.put_line('ir kļūda vardā');
         kluda := 1;
    end if;
    if REGEXP_LIKE(uzvards, '[[:alpha:]]+$') then
        dbms_output.put_line('nav kļūda vardā');
    else
         dbms_output.put_line('ir kļūda vardā');
         kluda := 1;
    end if;
    
    if kluda = 1 then
        dbms_output.put_line('ipasnieka pievienosana neveiksmīga');
    else
    insert into ipasnieki values (seq_ipasn.nextval,pers_k1 || '-' || pers_k2,
                                   vards,uzvards);
        dbms_output.put_line('ipasnieka pievienosana veiksmīga');
    end if;

 
  end new_ipasn;
begin
  NULL;
end;
/

exec add_ipasn.new_ipasn('110999','15325','Agnese','kļaviņa');

select * from ipasnieki;

--Struktūrvienību taula
create table strukturv (
ID number(5,0) not null constraint strukturv_pk primary key, 
nosauk varchar2(50) not null unique);

CREATE SEQUENCE seq_strukt_id
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

insert into strukturv values(seq_strukt_id.nextval, 'Rīga CSDD');
insert into strukturv values(seq_strukt_id.nextval, 'Jelgava CSDD');
insert into strukturv values(seq_strukt_id.nextval, 'Valmiera CSDD');
insert into strukturv values(seq_strukt_id.nextval, 'Tukums CSDD');

select * from strukturv;


--Numuru intervālu tabua
create table numinterv(
id number(5,0) not null constraint num_interv_pk primary key,
nrBurti varchar(2) not null,
nogenMNr number(1) DEFAULT 0,
strukt_id number(5,0) not null);

ALTER TABLE numinterv ADD
CONSTRAINT num_strukt_fk FOREIGN KEY (strukt_id) REFERENCES strukturv (id);

--drop sequence num_interv_id;
CREATE SEQUENCE num_interv_id
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

insert into numinterv values (num_interv_id.nextval, 'AA', 0, 1);
insert into numinterv values (num_interv_id.nextval, 'AB', 0, 2);
insert into numinterv values (num_interv_id.nextval, 'AX', 0, 1);
--insert into numinterv values (num_interv_id.nextval, 'AP', 0, 2);


select * 
from numinterv
ORDER BY ID;

select s.nosauk as Strukturvieniba,
    i.nrBurti as Intervals 
from numinterv i
left join strukturv s on s.id = i.strukt_id;


create or replace package next_numb_interv
is
  procedure next_nr(strukt number);
end;
/

create or replace package body next_numb_interv
is
-- Numura pirmais un otrais burts char un ascii veidā
  burti varchar2(2);
  burts2 varchar2(1);
  burts1 varchar2(1);
  burts2ASCII number(3);
  burts1ASCII number(3);
  procedure next_nr(strukt number)
  is
  begin
  
    select nrburti into burti
    from ( select n.*, max(id) over () as max_id
               from numinterv n
                    )
    where id = max_id;
    
    select SUBSTR(burti, 2, 1) into burts2 from dual;
    select SUBSTR(burti, 1, 1) into burts1 from dual;
    
    burts2ASCII := ascii(burts2);
    

-- ja numura otrais burts ir Z maina pirmo burtu uz nākamo    
    if burts2ASCII = 90 then
    burts1ascii := ascii(burts1);
    burts1ASCII := burts1ASCII + 1;
    burts1 := chr(burts1ascii);
    burts2 := 'A';
    else
    burts2ASCII := burts2ASCII + 1;
    burts2 := chr(burts2ascii);
    end if;


-- Pārbauda vai numuram netiek piešķirts angļu alfabēta burts
    CASE
        WHEN burts1 = 'Q' THEN 
            burts1 :='R';
        WHEN burts1 = 'W' THEN 
            burts1 := 'Z';
        WHEN burts1 = 'X' THEN 
            burts1 := 'Z';
        WHEN burts2 = 'Q' THEN 
            burts2 :='R';
        WHEN burts2 = 'W' THEN 
            burts2 := 'Z';
        WHEN burts2 = 'X' THEN 
            burts2 := 'Z';
        ELSE NULL;
    END case;

    
    dbms_output.put_line(burti);

    burti := burts1 || burts2;
    dbms_output.put_line(burti);
    insert into numinterv values (num_interv_id.nextval, burti ,0, strukt);
 
  end next_nr;
begin
  burts2ASCII := 0;
end;
/

exec next_numb_interv.next_nr(2);





--Reģistrācijas apliecību numuru intevali
create table aplinterv(
id number(5,0) not null constraint apl_interv_pk primary key,
aplBurti varchar(2) not null,
nogen_apl number(1) DEFAULT 0,
strukt_id number(5,0) not null);

ALTER TABLE aplinterv ADD
CONSTRAINT apl_strukt_fk FOREIGN KEY (strukt_id) REFERENCES strukturv (id);

CREATE SEQUENCE apl_interv_id
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

insert into aplinterv values (apl_interv_id.nextval, 'BA', 0, 1);
insert into aplinterv values (apl_interv_id.nextval, 'BB', 0, 2);
insert into aplinterv values (apl_interv_id.nextval, 'BC', 0, 3);


--Mašīnu numuri
--drop table numuri CASCADE CONSTRAINTS;
create table numuri (  
numurs varchar(7) not null constraint nr_pk primary key,  
statuss varchar2(20),
spec number(1) DEFAULT 0,
strukt_id number(5,0) not null);

ALTER TABLE numuri ADD
CONSTRAINT nr_strukt_fk FOREIGN KEY (strukt_id) REFERENCES strukturv (id);


insert into numuri values ('AA1212', 'b', 0, 1);
insert into numuri values ('AB1211', 'b', 0, 2);
insert into numuri values ('AA1132', 'b', 0, 1);
insert into numuri values ('KASPARS', 'b', 1, 3);
insert into numuri values ('AA1213', 'b', 0, 1);
insert into numuri values ('AA2212', 'b', 0, 1);
insert into numuri values ('AA1111', 'b', 0, 1);

select * from numuri;

/*
create or replace package next_numb
is
  procedure auto_nr(strukt number, j_numurs out varchar2);
end;
/

create or replace package body next_numb
is
-- Numura pirmais un otrais burts char un ascii veidā
  burti varchar2(7);
  burts2 varchar2(1);
  burts1 varchar2(1);
  cipari number(4);
  procedure auto_nr(strukt number, j_numurs out varchar2)
  is
  begin
  
    select numurs into burti
    from ( select n.*, max(numurs) over () as max_id
               from numuri n
               where n.spec = 0
            )
    where numurs = max_id;
    
    select SUBSTR(burti, 2, 1) into burts2 from dual;
    select SUBSTR(burti, 1, 1) into burts1 from dual;
    select TO_NUMBER(SUBSTR(burti, 3, 4),'9999') into cipari from dual;
    
    cipari := cipari +1;
    
    dbms_output.put_line(burti);

    burti := burts1 || burts2;
    j_numurs := burti || cipari;
    dbms_output.put_line(j_numurs);
    insert into numuri values (burti||cipari, 'a' ,0, strukt);
    
  end auto_nr;
begin
  NULL;
end;
/
exec next_numb.auto_nr(2);
*/

--Reg Apliecību numuri
--drop table apliecibas CASCADE CONSTRAINTS;
create table apliecibas (  
numurs varchar(9) not null constraint apl_pk primary key,  
statuss varchar2(20),
spec number(1) DEFAULT 0,
strukt_id number(5,0) not null);

ALTER TABLE apliecibas ADD
CONSTRAINT napl_strukt_fk FOREIGN KEY (strukt_id) REFERENCES strukturv (id);

insert into apliecibas values ('BA1212567', 'b', 0, 1);
insert into apliecibas values ('BB1231211', 'b', 0, 2);
insert into apliecibas values ('BC1537211', 'b', 0, 3);
insert into apliecibas values ('BA9212567', 'b', 0, 1);
insert into apliecibas values ('BB2231211', 'b', 0, 2);


--drop table masinas;
create table masinas( 
shasijas_nr varchar(17) not null constraint sas_nr_pk primary key,  
gads number(4),
piln_masa number(6),
pash_masa number(6),
model_id number(4),
krasa_id varchar2(5),
strukt_id number(5,0),
apl_nr varchar2(9),
mash_nr varchar2(6),
ipasn_id number(5),
piezimes varchar2(500));


ALTER TABLE masinas ADD
CONSTRAINT mas_maod_fk FOREIGN KEY (model_id) REFERENCES modeli (mod_id);

ALTER TABLE masinas ADD
CONSTRAINT mas_krasa_fk FOREIGN KEY (krasa_id) REFERENCES krasas (kods);

ALTER TABLE masinas ADD
CONSTRAINT mas_strukt_fk FOREIGN KEY (strukt_id) REFERENCES strukturv (id);

ALTER TABLE masinas ADD
CONSTRAINT mas_apl_fk FOREIGN KEY (apl_nr) REFERENCES apliecibas (numurs);

ALTER TABLE masinas ADD
CONSTRAINT mas_nr_fk FOREIGN KEY (mash_nr) REFERENCES numuri (numurs);

ALTER TABLE masinas ADD
CONSTRAINT mas_ipasn_fk FOREIGN KEY (ipasn_id) REFERENCES ipasnieki (id);


insert into masinas values ('WAUZZZ8CZNA123456','2015',1766,1533,2,'RED01',1,'BA1212567','AA1132',2,'');

select *
from masinas;



create or replace package add_car
is

  procedure new_car(vin varchar2, gads number, pilnmas number, pasmas number, 
                    in_marka varchar2, in_modelis varchar2, krasa varchar2,
                    strukt number, ipasnid  number);
end;
/

create or replace package body add_car
is
    burti varchar2(7);
    burts2 varchar2(1);
    burts1 varchar2(1);
    cipari number(4);
    aburti varchar2(9);
    aburts2 varchar2(1);
    aburts1 varchar2(1);
    acipari number(7);
    model_id number(5);
    mas_nr varchar2(6);
    mas_apl varchar2(9);
    kluda number(1);
    procedure new_car(vin varchar2, gads number, pilnmas number, pasmas number, 
                    in_marka varchar2, in_modelis varchar2, krasa varchar2,
                    strukt number, ipasnid  number)
  is
  begin
    kluda := 0;
    
    if gads < 1900 then
        kluda :=1;
        dbms_output.put_line('parāk vecs gads');
        RETURN;
    end if;
    if gads > 2019 then
        kluda :=1;
        dbms_output.put_line('pārāk jauns gads');
        RETURN;
    end if;
    if pasmas > pilnmas then
        kluda :=1;
        dbms_output.put_line('pasmasas kļūda');
        RETURN;
    end if;
    
    dbms_output.put_line(vin);
      
    select mod_id into model_id 
    from mark_modeli 
    where modelis = in_modelis
    and marka = in_marka;
    
    dbms_output.put_line(model_id);
    
    --procedūra numuri
    select numurs into burti
    from ( select n.*, max(numurs) over () as max_id
               from numuri n
               where n.spec = 0
               and strukt_id = strukt
            )
    where numurs = max_id;
    
    select SUBSTR(burti, 2, 1) into burts2 from dual;
    select SUBSTR(burti, 1, 1) into burts1 from dual;
    select TO_NUMBER(SUBSTR(burti, 3, 4),'9999') into cipari from dual;
    
    cipari := cipari +1;
    
    dbms_output.put_line(burti);

    burti := burts1 || burts2;
    mas_nr := burti || cipari;
    dbms_output.put_line(mas_nr);
    insert into numuri values (mas_nr, 'a' ,0, strukt);
    
    --procedūra apliecibas
    select numurs into aburti
    from ( select a.*, max(numurs) over () as max_id
               from apliecibas a
               where strukt_id = strukt
            )
    where numurs = max_id;
    
    select SUBSTR(aburti, 2, 1) into aburts2 from dual;
    select SUBSTR(aburti, 1, 1) into aburts1 from dual;
    select TO_NUMBER(SUBSTR(aburti, 3, 7),'9999999') into acipari from dual;
    
    acipari := acipari +1;
    
    dbms_output.put_line(burti);

    aburti := aburts1 || aburts2;
    mas_apl := aburti || acipari;
    dbms_output.put_line(mas_apl);
    insert into apliecibas values (mas_apl, 'a' ,0, strukt);
    
    insert into masinas values (vin,gads,pilnmas,pasmas,model_id,krasa,strukt,mas_apl,mas_nr,ipasnid,'');
  end new_car;
begin
  NULL;
end;
/

exec add_car.new_car('WAUZZZ6CZMA4447', 2010, 1669, 1420, 'AUDI', 'A6', 'GREEN', 2, 1);

exec add_car.new_car('WAYHHZ6CZMA3367', 2017, 1839, 1600, 'Mercedes', 'S500', 'GREEN', 2, 1);

    select mod_id
    from mark_modeli
    where modelis = 'A4';


/*
select *
from user_tables;

select *
from user_tab_cols;
*/

create or replace view masinas_view
as 
select m.shasijas_nr as "Šasijas nr", m.gads, m.piln_masa as "Pilna masa",
    m.pash_masa as Pašmasa, mo.modelis, ma.marka, k.nosaukums as krāsa,
    s.nosauk as struktūrvienība, m.mash_nr as numurs, m.apl_nr as "Apliecības nr",
    i.vards as "īpasnieka vārds",
    i.uzvards as "īpašnieka uzvārds"
from masinas m 
left join modeli mo 
on m.model_id = mo.mod_ID
left join markas ma
on ma.id = mo.marka_id
left join krasas k
on m.krasa_id = k.kods
left join strukturv s
on m.strukt_id = s.id
left join ipasnieki i
on m.ipasn_id = i.id;


select * from masinas_view  
where "Šasijas nr" is not null;
